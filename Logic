



///*
// * To change this license header, choose License Headers in Project Properties.
// * To change this template file, choose Tools | Templates
// * and open the template in the editor.
// */
//package assignment3;
//
//import java.util.ArrayList;
//import java.util.Arrays;
//import java.util.Comparator;
//import java.util.List;
//import java.util.Scanner;
//
///**
// *
// * @author MarcV
// */
//public class AddShapes {
//
//    private List<Geometricable> shapesList = new ArrayList<Geometricable>();
//    Geometricable[] shapesArr;
//
//    @Override
//    public String toString() {
//        return "AddShapes{" + "shapesList=" + shapesList + '}';
//    }
//
//    public void addSquare(double x1, double y1, double x2, double y2) {
//        Square square = new Square(x1, y1, x2, y2);
//        square.toString();
//        shapesList.add(square);
//    }
//
//    public void addCircle(double x, double y, double r) {
//        Circle circle = new Circle(x, y, r);
//        circle.toString();
//        shapesList.add(circle);
//    }
//
//    public void show() {
//        for (int i = 0; i < shapesList.size(); i++) {
//            System.out.println(shapesList.get(i));
//
//        }
//
//    }
//
//    public void removeShape(int index) {
//        for (int i = 0; i < shapesList.size(); i++) {
//            shapesList.remove(index);
//
//        }
//    }
//
//    public void move(int index, double dx, double dy) {
//        for (int i = 0; i < shapesList.size(); i++) {
//            shapesList.get(index).move(dx, dy);
//
//        }
//
//    }
//
//    public void sort() {
//        // Geometricable[10] shapesArr = new Geometricable[shapesList.size()];
//        Geometricable[] shapesArr;
//        shapesArr = new Geometricable[shapesList.size()];
////        Arrays.asList(new Integer[10]);
//        shapesArr = shapesList.toArray(shapesArr);
//        Arrays.sort(shapesArr);
//
//        System.out.println(Arrays.toString(shapesArr));
//
//    }
//
////    public void sort1() {
////        // Geometricable[10] shapesArr = new Geometricable[shapesList.size()];
////        Geometricable[] shapesArr;
////        shapesArr = new Geometricable[shapesList.size()];
//////        Arrays.asList(new Integer[10]);
////        shapesArr = shapesList.toArray(shapesArr);
////        ComperatorX comparatorX = new ComperatorX();
////        Arrays.sort(shapesArr, comparatorX);
////
////        System.out.println(Arrays.toString(shapesArr));
////
////    }
////
////    public void sort2() {
////        // Geometricable[10] shapesArr = new Geometricable[shapesList.size()];
////        Geometricable[] shapesArr;
////        shapesArr = new Geometricable[shapesList.size()];
//////        Arrays.asList(new Integer[10]);
////        shapesArr = shapesList.toArray(shapesArr);
////        ComperatorY comparatorY = new ComperatorY();
////        Arrays.sort(shapesArr, comparatorY);
////
////        System.out.println(Arrays.toString(shapesArr));
////
////    }
//    public void sortSwitch(String Type) {
//        Geometricable[] shapesArr;
//        shapesArr = new Geometricable[shapesList.size()];
//        shapesArr = shapesList.toArray(shapesArr);
//        switch (Type) {
//            case " x":
//                System.out.println("You have chosen x");
//                ComperatorX comparatorX = new ComperatorX();
//                Arrays.sort(shapesArr, comparatorX);
//                System.out.println(Arrays.toString(shapesArr));
//                break;
//            case " y":
//                System.out.println("You have chosen y");
//                ComperatorY comparatorY = new ComperatorY();
//                Arrays.sort(shapesArr, comparatorY);
//                System.out.println(Arrays.toString(shapesArr));
//                break;
//        }
//
//    }
//
//}

















/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ooassignement3;	

import java.util.Arrays;

/**
 *
 * @author Marc-William Verwoert s4718801 and Madelief Rennspies s4703103
 */
public class Logic {

    private final Geometricable[] shapes;
    private final int shapesLength = 10;

    public Logic() {
        this.shapes = new Geometricable[shapesLength];
    }

    public void addCircle(double x, double y, double r) {
        Circle circle = new Circle(x, y, r);
        addShape(circle);
    }

    public void addRectangle(double x, double y, double h, double w) {
        Rectangle rectangle = new Rectangle(x, y, h, w);
        addShape(rectangle);
    }

    private void addShape(Geometricable shape) {
        int index = 0;
        while (shapes[index] != null) {
            index++;
        }
        if (index >= shapesLength) {
            throw new IllegalArgumentException("Array is full");
        } else {
            shapes[index] = shape;
        }
    }

    public void showList() {
        System.out.println(Arrays.toString(shapes));
    }

    public void move(int i, double dx, double dy) {
        Geometricable shape = shapes[i];
        shape.moveObject(dx, dy);
    }

    public void remove(int index) {
        for (int i = index; i < shapes.length-1; i++) {
            shapes[i]= shapes[i+1];
        }
          shapes[shapes.length - 1] = null;
    }

    public void sort(String type) {
        switch (type) {
            case " x":
                LeftRightComparator lrc = new LeftRightComparator();
                Arrays.sort(shapes, lrc);
                break;
            case " y":
                LowHighComparator lhc = new LowHighComparator();
                Arrays.sort(shapes, lhc);
                break;
            default:
                System.out.println("invalid sorting argument");
        }
    }

    public void sort() {
        Arrays.sort(shapes);
    }
}
